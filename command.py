# -*- coding: utf-8 -*-
"""command.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sXPvB0PxG04C436--0RAMxJXiATce6e5
"""

from abc import ABC, abstractmethod


class Command(ABC):
    @abstractmethod
    def execute(self):
        pass

    @abstractmethod
    def undo(self):
        pass

class Light:
    def on(self):
        print("Light is ON")

    def off(self):
        print("Light is OFF")
class LightOnCommand(Command):
    def __init__(self, light: Light):
        self.light = light

    def execute(self):
        self.light.on()

    def undo(self):
        self.light.off()

class LightOffCommand(Command):
    def __init__(self, light: Light):
        self.light = light

    def execute(self):
        self.light.off()

    def undo(self):
        self.light.on()



class RemoteControl:
    def __init__(self):
        self._command = None
        self._history = []

    def set_command(self, command: Command):
        self._command = command

    def press_button(self):
        if not self._command:
            raise ValueError("Command not set")
        self._command.execute()
        self._history.append(self._command)

    def press_undo(self):
        if not self._history:
            raise ValueError("No commands to undo")
        last_command = self._history.pop()
        last_command.undo()

import pytest
from unittest.mock import MagicMock


# Позитивные тесты
def test_light_on_command_executes_on():
    light = Light()
    light.on = MagicMock()
    command = LightOnCommand(light)
    command.execute()
    light.on.assert_called_once()

def test_light_off_command_executes_off():
    light = Light()
    light.off = MagicMock()
    command = LightOffCommand(light)
    command.execute()
    light.off.assert_called_once()

def test_remote_control_executes_command():
    light = Light()
    light.on = MagicMock()
    command = LightOnCommand(light)
    remote = RemoteControl()
    remote.set_command(command)
    remote.press_button()
    light.on.assert_called_once()

def test_undo_last_command():
    light = Light()
    light.on = MagicMock()
    light.off = MagicMock()
    command = LightOnCommand(light)
    remote = RemoteControl()
    remote.set_command(command)
    remote.press_button()
    remote.press_undo()
    light.off.assert_called_once()

# Негативные тесты
def test_press_button_without_command():
    remote = RemoteControl()
    with pytest.raises(ValueError, match="Command not set"):
        remote.press_button()

def test_undo_without_history():
    light = Light()
    remote = RemoteControl()
    command = LightOnCommand(light)
    remote.set_command(command)
    with pytest.raises(ValueError, match="No commands to undo"):
        remote.press_undo()

# Тест с mock'ом: имитируем, что Light недоступен
def test_command_with_mock_receiver_error():
    light = MagicMock()
    light.on.side_effect = Exception("Light is broken")
    command = LightOnCommand(light)
    with pytest.raises(Exception, match="Light is broken"):
        command.execute()

if __name__ == "__main__":
    light = Light()
    on_command = LightOnCommand(light)
    off_command = LightOffCommand(light)

    remote = RemoteControl()
    remote.set_command(on_command)
    remote.press_button()

    remote.set_command(off_command)
    remote.press_button()

    remote.press_undo()
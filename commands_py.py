# -*- coding: utf-8 -*-
"""commands.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/151T87WIQaWfhcHsgJyK0amn-2bdG9SIo
"""

from abc import ABC, abstractmethod

class Command(ABC):
    @abstractmethod
    def execute(self):
        pass

    @abstractmethod
    def undo(self):
        pass


class Light:
    def on(self):
        print("Light is ON")

    def off(self):
        print("Light is OFF")


class LightOnCommand(Command):
    def __init__(self, light: Light):
        self.light = light

    def execute(self):
        self.light.on()

    def undo(self):
        self.light.off()


class LightOffCommand(Command):
    def __init__(self, light: Light):
        self.light = light

    def execute(self):
        self.light.off()

    def undo(self):
        self.light.on()


class RemoteControl:
    def __init__(self):
        self._command = None
        self._history = []

    def set_command(self, command: Command):
        self._command = command

    def press_button(self):
        if not self._command:
            raise ValueError("Command not set")
        self._command.execute()
        self._history.append(self._command)

    def press_undo(self):
        if not self._history:
            raise ValueError("No commands to undo")
        last_command = self._history.pop()
        last_command.undo()